{"version":3,"sources":["environment.ts","app.ts","main.ts","D:/Dev/Github/benlaan/sqlformat/Laan.Sql.Formatter.Web/app/src/app.html","D:/Dev/Github/benlaan/sqlformat/Laan.Sql.Formatter.Web/app/src/app.css","D:/Dev/Github/benlaan/sqlformat/Laan.Sql.Formatter.Web/app/src/navBar.html"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport { autoinject } from 'aurelia-framework';\nimport { HttpClient } from 'aurelia-http-client';\nimport { prettyPrintOne } from 'google-code-prettify';\n\n@autoinject\nexport class App {\n\n  private _formattedSql: Array<string>;\n\n  public constructor(private client: HttpClient) {\n\n      this.rawSql = environment.debug ? \"SELECT * FROM Table T JOIN Other O ON O.Id = T.OtherId\" : \"\";\n  }\n\n  public convert(): Promise<void> {\n\n      return this\n          .client\n          .createRequest(\"/api/sql/format\")\n          .asPost()\n          .withHeader('Content-Type', 'text/plain')\n          .withContent(this.rawSql)\n          .send()\n          .then(r => {\n\n              var result = JSON.parse(r.response);\n              this.formattedSql = result.Sql;\n              this.timeTaken = result.Duration;\n          })\n          .catch(r => {\n\n              console.log(r.response);\n              // TODO: toastr.show(r.response);\n          });\n  }\n\n  public inputSqlKeyPress(event: KeyboardEvent): boolean  {\r\n\r\n      if (event.keyCode == 13 && event.ctrlKey) {\r\n\r\n          this.convert();\r\n          return false;\r\n      }\r\n\r\n      return true;\r\n  }\n  public copy(): void {\n\n    if (!this.formattedCode)\n        return;\n\n    var range = document.createRange();\n    range.selectNode(this.formattedCode)\n    window.getSelection().addRange(range);\n    document.execCommand(\"copy\");\n    window.getSelection().empty();\n  }\n\n  public get formattedSql(): Array<string> {\n\n      return this._formattedSql;\n  }\n\r\n  public set formattedSql(value: Array<string>) {\n\n      this._formattedSql = value;\n      this.formattedCode.innerHTML = prettyPrintOne(value.join(\"\\n\"));\n  }\n\n  public timeTaken: string;\n  public rawSql: string;\n  public formattedCode: Element;\n}\n","import 'bootstrap';\nimport {Aurelia} from 'aurelia-framework';\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n\n  aurelia.use\n    .standardConfiguration();\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  aurelia.use\n    .plugin('aurelia-bootstrap-plugin');\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n",null,null,null],"sourceRoot":"..\\src"}